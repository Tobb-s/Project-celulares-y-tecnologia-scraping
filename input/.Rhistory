source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/Graficos_Primer_Analisis.R")
source("~/.active-rstudio-document")
#------------------------------------------------------------Importamos los Archivos necesarios------------------------------------------------------------------
# 1. Definimos el directorio de entrada
input_dir <- "C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/input"
# 2. Listamos todos los CSV en la carpeta
csv_files <- list.files(path = input_dir,
pattern = "\\.csv$",
full.names = TRUE)
# 3. Los leemos en una lista, nombrando cada elemento con el nombre del archivo (sin extensión)
tabla_list <- csv_files %>%
set_names(nm = tools::file_path_sans_ext(basename(.))) %>%
map(read_csv)
ls()
#------------------------------------------------------------Importamos los Archivos necesarios------------------------------------------------------------------
# 1. Directorio de entrada
input_dir <- "C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/input"
# 2. Lectura de cada CSV
tabla_claro     <- read.csv(file.path(input_dir, "claro_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_personal  <- read.csv(file.path(input_dir, "personal_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_centrogar <- read.csv(file.path(input_dir, "cetrogar_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_completa  <- read.csv(file.path(input_dir, "celulares_todos_base.csv"),
stringsAsFactors = FALSE)
print(distribucion_precios_gauss)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping - copia (2)/scripts/03 - EDA/EDA_v2.3.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
print(distribucion_precios_gauss)
print(distribucion_features_por_gama)
) +
#==================== ANÁLISIS DE DISTRIBUCIÓN DE CARACTERÍSTICAS POR GAMA ====================
# --- Gráfico de Densidad de Características por Gama de Precios ---
# 1. Preparar los datos: Seleccionar y pivotar para formato largo.
datos_densidad_facetas <- tabla_limpia %>%
select(
`RAM (GB)`,
`Almacenamiento (GB)` = `Almacenamiento interno (GB)`,
`Cámara (MP)` = `Camara Principal (MP)`,
`Gama` = Categoria
) %>%
pivot_longer(
cols = -Gama, # Pivotar todas las columnas excepto 'Gama'
names_to = "Caracteristica",
values_to = "Valor"
)
# 2. Calcular las coordenadas de los picos para las etiquetas
peak_labels <- datos_densidad_facetas %>%
group_by(Caracteristica, Gama) %>%
summarise(
dens = list(density(Valor, na.rm = TRUE)),
.groups = 'drop'
) %>%
mutate(
x_peak = map_dbl(dens, ~ .x$x[which.max(.x$y)]),
y_peak = map_dbl(dens, ~ max(.x$y))
) %>%
select(-dens) %>%
# Redondear el valor del pico a un número entero
mutate(x_rounded = round(x_peak)) %>%
# Agrupar por característica y ordenar para encontrar duplicados
group_by(Caracteristica) %>%
arrange(x_rounded) %>%
# Si un valor es igual o muy cercano al anterior, se considera un duplicado y se oculta la etiqueta
mutate(
label = if_else(
abs(x_rounded - lag(x_rounded, default = -999)) <= 1,
"", # Etiqueta vacía si es duplicado
as.character(x_rounded) # Mostrar el número si no es duplicado
)
) %>%
ungroup()
# 3. Crear el gráfico de densidad facetado con etiquetas en los picos
distribucion_features_por_gama <- ggplot(datos_densidad_facetas, aes(x = Valor, fill = Gama)) +
geom_density(alpha = 0.7, color="white", linewidth=0.2) +
# Añadir las etiquetas de texto usando los datos procesados
geom_text(
data = peak_labels,
aes(x = x_peak, y = y_peak, label = label), # Usar la nueva columna de etiquetas
vjust = -0.7, # Ajuste vertical para que la etiqueta quede sobre el pico
size = 3.5,
color = "black",
fontface = "bold"
) +
facet_wrap(~ Caracteristica, scales = "free") + # Facetas para cada característica, con escalas libres
scale_fill_material_d(name = "Gama de Precio") + # Usar paleta Material Design y nombrar la leyenda
labs(
title = "Distribución de Características por Gama de Precio",
subtitle = "Cómo se distribuyen RAM, Almacenamiento y Megapíxeles en cada segmento",
x = "Valor de la Característica",
y = "Densidad"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold") # Estilo para los títulos de las facetas
)
# 4. Imprimir el gráfico
print(distribucion_features_por_gama)
# 1. Preparar los datos: Seleccionar y pivotar para formato largo.
datos_densidad_facetas <- tabla_limpia %>%
select(
`RAM (GB)`,
`Almacenamiento (GB)` = `Almacenamiento interno (GB)`,
`Cámara (MP)` = `Camara Principal (MP)`,
`Gama` = Categoria
) %>%
pivot_longer(
cols = -Gama, # Pivotar todas las columnas excepto 'Gama'
names_to = "Caracteristica",
values_to = "Valor"
)
# 2. Calcular las coordenadas de los picos para las etiquetas
peak_labels <- datos_densidad_facetas %>%
group_by(Caracteristica, Gama) %>%
summarise(
dens = list(density(Valor, na.rm = TRUE)),
.groups = 'drop'
) %>%
mutate(
x_peak = map_dbl(dens, ~ .x$x[which.max(.x$y)]),
y_peak = map_dbl(dens, ~ max(.x$y))
) %>%
select(-dens) %>%
# Redondear el valor del pico a un número entero
mutate(x_rounded = round(x_peak)) %>%
# Agrupar por característica y ordenar para encontrar duplicados
group_by(Caracteristica) %>%
arrange(x_rounded) %>%
# Si un valor es igual o muy cercano al anterior, se considera un duplicado y se oculta la etiqueta
mutate(
label = if_else(
abs(x_rounded - lag(x_rounded, default = -999)) <= 1,
"", # Etiqueta vacía si es duplicado
as.character(x_rounded) # Mostrar el número si no es duplicado
)
) %>%
ungroup()
# 3. Crear el gráfico de densidad facetado con etiquetas en los picos
distribucion_features_por_gama <- ggplot(datos_densidad_facetas, aes(x = Valor, fill = Gama)) +
geom_density(alpha = 0.7, color="white", linewidth=0.2) +
# Añadir las etiquetas de texto usando los datos procesados
geom_text(
data = peak_labels,
aes(x = x_peak, y = y_peak, label = label), # Usar la nueva columna de etiquetas
vjust = -0.7, # Ajuste vertical para que la etiqueta quede sobre el pico
size = 3.5,
color = "black",
fontface = "bold"
) +
facet_wrap(~ Caracteristica, scales = "free") + # Facetas para cada característica, con escalas libres
scale_fill_material_d(name = "Gama de Precio") + # Usar paleta Material Design y nombrar la leyenda
labs(
title = "Características por Gama de Precio",
subtitle = "RAM, Almacenamiento y Megapíxeles por segmento",
x = "Valor",
y = "Densidad"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold") # Estilo para los títulos de las facetas
)
# 4. Imprimir el gráfico
print(distribucion_features_por_gama)
print(distribucion_por_sitio)
print(distribucion_features_por_gama)
scale_fill_material_d(name = "Gama de Precio") + # Usar paleta Material Design y nombrar la leyenda
labs(
title = "Características por Gama",
subtitle = "RAM, Almacenamiento y Megapíxeles por segmento",
x = "Valor",
y = "Densidad"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold") # Estilo para los títulos de las facetas
)
#--------------- Distribucion de Precios por Gama----------------
# 1. Preparar los datos: Seleccionar y pivotar para formato largo.
datos_densidad_facetas <- tabla_limpia %>%
select(
`RAM (GB)`,
`Almacenamiento (GB)` = `Almacenamiento interno (GB)`,
`Cámara (MP)` = `Camara Principal (MP)`,
`Gama` = Categoria
) %>%
pivot_longer(
cols = -Gama, # Pivotar todas las columnas excepto 'Gama'
names_to = "Caracteristica",
values_to = "Valor"
)
# 2. Calcular las coordenadas de los picos para las etiquetas
peak_labels <- datos_densidad_facetas %>%
group_by(Caracteristica, Gama) %>%
summarise(
dens = list(density(Valor, na.rm = TRUE)),
.groups = 'drop'
) %>%
mutate(
x_peak = map_dbl(dens, ~ .x$x[which.max(.x$y)]),
y_peak = map_dbl(dens, ~ max(.x$y))
) %>%
select(-dens) %>%
# Redondear el valor del pico a un número entero
mutate(x_rounded = round(x_peak)) %>%
# Agrupar por característica y ordenar para encontrar duplicados
group_by(Caracteristica) %>%
arrange(x_rounded) %>%
# Si un valor es igual o muy cercano al anterior, se considera un duplicado y se oculta la etiqueta
mutate(
label = if_else(
abs(x_rounded - lag(x_rounded, default = -999)) <= 1,
"", # Etiqueta vacía si es duplicado
as.character(x_rounded) # Mostrar el número si no es duplicado
)
) %>%
ungroup()
# 3. Crear el gráfico de densidad facetado con etiquetas en los picos
distribucion_features_por_gama <- ggplot(datos_densidad_facetas, aes(x = Valor, fill = Gama)) +
geom_density(alpha = 0.7, color="white", linewidth=0.2) +
# Añadir las etiquetas de texto usando los datos procesados
geom_text(
data = peak_labels,
aes(x = x_peak, y = y_peak, label = label), # Usar la nueva columna de etiquetas
vjust = -0.7, # Ajuste vertical para que la etiqueta quede sobre el pico
size = 3.5,
color = "black",
fontface = "bold"
) +
facet_wrap(~ Caracteristica, scales = "free") + # Facetas para cada característica, con escalas libres
scale_fill_material_d(name = "Gama de Precio") + # Usar paleta Material Design y nombrar la leyenda
labs(
title = "Características por Gama",
subtitle = "RAM, Almacenamiento y Megapíxeles por segmento",
x = "Valor",
y = "Densidad"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
legend.position = "bottom",
strip.text = element_text(size = 11, face = "bold") # Estilo para los títulos de las facetas
)
# 4. Imprimir el gráfico
print(distribucion_features_por_gama)
# 2. Imprimir el gráfico
print(distribucion_por_sitio)
# 2. Imprimir el gráfico
print(distribucion_por_sitio)
print(distribucion_por_sitio)
# Grafico
print(distribucion_features_por_gama)
print(barplot_valor_promedio_marca)
print(barplot_top3_ram_por_categoria)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
print(distribucion_precios_gauss)
#6.1 -----  Distrbucion Gauss de Precios "Precio_comprador" y " Precio_anterior" ------
datos_norm <- tabla_completa %>%
mutate(
Precio_comprador = Precio_comprador / 1000,
Precio_anterior  = Precio_anterior  / 1000
)
# 1. Calcular medias y desviaciones
mu1    <- mean(datos_norm$Precio_comprador, na.rm = TRUE)
sd1    <- sd(datos_norm$Precio_comprador, na.rm = TRUE)
mu2    <- mean(datos_norm$Precio_anterior,  na.rm = TRUE)
sd2    <- sd(datos_norm$Precio_anterior,  na.rm = TRUE)
# 2. Crear un data.frame de valores x para graficar
x_min  <- min(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_max  <- max(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_vals <- seq(x_min, x_max, length.out = 500)
gauss_df <- tibble(
x = rep(x_vals, 2),
y = c(dnorm(x_vals, mean = mu1, sd = sd1),
dnorm(x_vals, mean = mu2, sd = sd2)),
tipo = rep(c("Precio_comprador", "Precio_anterior"), each = length(x_vals))
)
# 3. Graficar
# CORRECCIÓN: Se cambia 'size = 1' por 'linewidth = 1' para alinearse con las nuevas versiones de ggplot2.
distribucion_precios_gauss <- ggplot(gauss_df, aes(x = x, y = y, color = tipo)) +
geom_line(linewidth = 1) +
scale_fill_material_d() +    ## Paleta de colores elegida
scale_x_continuous(
labels = scales::dollar_format(
prefix = "$",
big.mark = ".",
decimal.mark = ",",
accuracy = 0.01
)
) +
scale_y_continuous(
labels = function(z) {
# multiplicar por 1000 y luego formatear con 4 decimales fijos
fmt <- scales::number_format(accuracy = 0.0001, decimal.mark = ",", big.mark = ".")
fmt(z * 1000)
}
) +
labs(
title = "Distribución de Precios",
x     = "Precio (/1000)",
y     = "Densidad",   # aclarar en la etiqueta que está escalado
color = NULL
) +
theme_minimal(base_size = 10) +
theme(
plot.title    = element_text(hjust = 0.5),
legend.position = "top"
)
print(distribucion_precios_gauss)
#6.2 -----  Relación calidad-precio desde el punto de vista del almacenamiento ( Mientras mas alto menos conviene) ------
tabla_promedio_por_marca <- tabla_completa %>%
group_by(marca) %>%
summarise(
ratio_promedio = mean(ratio_memoria_precio, na.rm = TRUE)
) %>%
ungroup()
# Gráfico con paleta Material Design discreta
barplot_valor_promedio_marca <- ggplot(
tabla_promedio_por_marca,
aes(
x = ratio_promedio,
y = fct_reorder(marca, ratio_promedio),
fill = marca
)
) +
geom_col(show.legend = FALSE) +
geom_text(
aes(label = number(ratio_promedio, accuracy = 0.01)),
hjust = -0.2,
size = 3.5,
color = "black"
) +
scale_fill_material_d() +  # paleta Material Design discreta
scale_x_continuous(expand = expansion(mult = c(0.05, 0.18))) +
labs(
title    = "Memoria vs Precio",
subtitle = NULL,
x        = "GB por 1000 moneda",
y        = "Marca"
) +
theme_minimal(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12)
)
print(barplot_valor_promedio_marca)
print(distribucion_precios_gauss)
print(marcasXmodelo)
print(barplot_top3_ram)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
