source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/Graficos_Primer_Analisis.R")
source("~/.active-rstudio-document")
#------------------------------------------------------------Importamos los Archivos necesarios------------------------------------------------------------------
# 1. Definimos el directorio de entrada
input_dir <- "C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/input"
# 2. Listamos todos los CSV en la carpeta
csv_files <- list.files(path = input_dir,
pattern = "\\.csv$",
full.names = TRUE)
# 3. Los leemos en una lista, nombrando cada elemento con el nombre del archivo (sin extensión)
tabla_list <- csv_files %>%
set_names(nm = tools::file_path_sans_ext(basename(.))) %>%
map(read_csv)
ls()
#------------------------------------------------------------Importamos los Archivos necesarios------------------------------------------------------------------
# 1. Directorio de entrada
input_dir <- "C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/input"
# 2. Lectura de cada CSV
tabla_claro     <- read.csv(file.path(input_dir, "claro_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_personal  <- read.csv(file.path(input_dir, "personal_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_centrogar <- read.csv(file.path(input_dir, "cetrogar_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_completa  <- read.csv(file.path(input_dir, "celulares_todos_base.csv"),
stringsAsFactors = FALSE)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
## Medidas de Dispercion::-----------------------------------------------------------------------------------------------------
# 3. Cálculo de medidas de dispersión: rango, desviación estándar y varianza ----
dispersion <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
rango = ~ diff(range(.x, na.rm = TRUE)),       # max – min
sd    = ~ sd(.x, na.rm = TRUE),                # desviación estándar
var   = ~ var(.x, na.rm = TRUE)                # varianza
),
.names = "{.col}_{.fn}"                          # nombres: e.g. Precio_comprador_sd
)
)
View(dispersion)
# 3. Cálculo de medidas de dispersión en formato ancho (igual que antes)
dispersion_wide <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
rango = ~ diff(range(.x, na.rm = TRUE)),
sd    = ~ sd(.x, na.rm = TRUE),
var   = ~ var(.x, na.rm = TRUE)
),
.names = "{.col}_{.fn}"
)
)
# 4. Reordenar a formato largo y volver a ancho con variables en filas ----
dispersion_longa <- dispersion_wide %>%
pivot_longer(
cols = everything(),
names_to = c("variable", "estadistica"),
names_sep = "_",
values_to = "valor"
) %>%
pivot_wider(
names_from = estadistica,
values_from = valor
)
# Ver el resultado
print(dispersion_longa)
View(eda_tabla)
# 1. Calculamos las estadísticas y las ponemos en formato “largo”:
dispersion_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
rango = ~ diff(range(.x, na.rm = TRUE)),
sd    = ~ sd(.x, na.rm = TRUE),
var   = ~ var(.x, na.rm = TRUE)
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
everything(),
names_to    = c("variable", "estadística"),
names_sep   = "_",
values_to   = "valor"
) %>%
pivot_wider(
names_from  = estadística,
values_from = valor
)mutate(variable = recode(variable,
## 1. Calculamos las estadísticas y las ponemos en formato “largo”:
dispersion_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
rango = ~ diff(range(.x, na.rm = TRUE)),
sd    = ~ sd(.x, na.rm = TRUE),
var   = ~ var(.x, na.rm = TRUE)
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "estadística"),
names_sep  = "_",
values_to  = "valor"
) %>%
pivot_wider(
names_from  = estadística,
values_from = valor
) %>%
## 2. (Opcional) recodificamos nombres más cortos
mutate(variable = recode(variable,
`Precio_comprador`             = "Precio",
`per_descuento`                = "% Descuento",
`RAM (GB)`                     = "RAM (GB)",
`Almacenamiento interno (GB)`  = "Alm. (GB)",
`Camara Principal (MP)`        = "Cámara Ppal (MP)",
`Camara frontal (MP)`          = "Cámara Frontal (MP)"
)) %>%
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
select(variable, rango, sd, var)
View(dispersion_longa)
## Medidas de Dispercion::-----------------------------------------------------------------------------------------------------
dispersion_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
rango = ~ diff(range(.x, na.rm = TRUE)),
sd    = ~ sd(.x,    na.rm = TRUE),
var   = ~ var(.x,   na.rm = TRUE)
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols      = everything(),
names_to  = c("variable", "estadistica"),
names_pattern = "(.*)_(rango|sd|var)$",
values_to = "valor"
) %>%
pivot_wider(
names_from  = estadistica,
values_from = valor
) %>%
mutate(variable = recode(variable,
"Precio_comprador"             = "Precio",
"per_descuento"                = "% Descuento",
"RAM (GB)"                     = "RAM (GB)",
"Almacenamiento interno (GB)"  = "Alm. (GB)",
"Camara Principal (MP)"        = "Cámara Ppal (MP)",
"Camara frontal (MP)"          = "Cámara Frontal (MP)"
)) %>%
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
select(variable, rango, sd, var)
View(dispersion_longa)
print(distribucion_precios_gauss)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR          = ~ IQR(.x, na.rm = TRUE),                           # Q3 – Q1
Semi_IQR     = ~ IQR(.x, na.rm = TRUE) / 2,                       # (Q3–Q1)/2
Rango_decílico = ~ diff(quantile(.x, c(0.1, 0.9), na.rm = TRUE)), # P90 – P10
P90_10       = ~ quantile(.x, 0.9, na.rm = TRUE) -
quantile(.x, 0.1, na.rm = TRUE)                   # idéntico a Rango_decílico
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols          = everything(),
names_to      = c("variable", "medida"),
# capturar todo antes del _ final como 'variable' y la parte final como 'medida'
names_pattern = "(.*)_(IQR|Semi_IQR|Rango_decílico|P90_10)$",
values_to     = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# (Opcional) renombrar variables para abreviar
mutate(variable = recode(variable,
"Precio_comprador"            = "Precio",
"per_descuento"               = "% Desc.",
"RAM (GB)"                    = "RAM (GB)",
"Almacenamiento interno (GB)" = "Alm. (GB)",
"Camara Principal (MP)"       = "Cámara Ppal (MP)",
"Camara frontal (MP)"         = "Cámara Frontal (MP)"
)) %>%
# redondear sin decimales
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# dejar columnas en el orden deseado
select(variable, IQR, Semi_IQR, Rango_decílico, P90_10)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR        = ~ IQR(.x, na.rm = TRUE),
Semi_IQR   = ~ (quantile(.x, .75, na.rm = TRUE) - quantile(.x, .25, na.rm = TRUE)) / 2,
Rango_10_90 = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
# separa en dos partes: todo hasta el _ final y lo que queda después
names_sep  = "_(?=[^_]+$)",
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# redondeamos
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# reordenamos columnas
select(variable, IQR, Semi_IQR, Rango_10_90)
## Medidas Basadas en Cuantiles ( medidas mas robustas)-------------------------------------------------
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR        = ~ IQR(.x, na.rm = TRUE),
Semi_IQR   = ~ (quantile(.x, .75, na.rm = TRUE) - quantile(.x, .25, na.rm = TRUE)) / 2,
Rango_10_90 = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
# separa en dos partes: todo hasta el _ final y lo que queda después
names_sep  = "_(?=[^_]+$)",
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# redondeamos
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# reordenamos columnas
select(variable, IQR, Semi_IQR, Rango_10_90)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR      = ~ IQR(.x,   na.rm = TRUE),                          # Q3 – Q1
Semi_IQR = ~ IQR(.x,   na.rm = TRUE) / 2,                      # (Q3–Q1)/2
P90_10   = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))      # P90 – P10
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
names_sep  = "_(?=[^_]+$)",   # separa sólo en el ÚLTIMO guión bajo
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# 2. Recodificar nombres de variable para que queden más cortos
mutate(variable = recode(variable,
"Precio_comprador"            = "Precio",
"per_descuento"               = "% Desc.",
"RAM (GB)"                    = "RAM (GB)",
"Almacenamiento interno (GB)" = "Alm. (GB)",
"Camara Principal (MP)"       = "Cámara Ppal (MP)",
"Camara frontal (MP)"         = "Cámara Frontal (MP)"
)) %>%
# 3. Redondear sin decimales
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# 4. Seleccionar columnas en el orden deseado
select(variable, IQR, Semi_IQR, P90_10
View(robust_longa)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR      = ~ IQR(.x,   na.rm = TRUE),                          # Q3 – Q1
Semi_IQR = ~ IQR(.x,   na.rm = TRUE) / 2,                      # (Q3–Q1)/2
P90_10   = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))      # P90 – P10
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
names_sep  = "_(?=[^_]+$)",   # separa sólo en el ÚLTIMO guión bajo
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# 2. Recodificar nombres de variable para que queden más cortos
mutate(variable = recode(variable,
"Precio_comprador"            = "Precio",
"per_descuento"               = "% Desc.",
"RAM (GB)"                    = "RAM (GB)",
"Almacenamiento interno (GB)" = "Alm. (GB)",
"Camara Principal (MP)"       = "Cámara Ppal (MP)",
"Camara frontal (MP)"         = "Cámara Frontal (MP)"
)) %>%
# 3. Redondear sin decimales
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# 4. Seleccionar columnas en el orden deseado
select(variable, IQR, Semi_IQR, P90_10)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR      = ~ IQR(.x,   na.rm = TRUE),                          # Q3 – Q1
Semi_IQR = ~ IQR(.x,   na.rm = TRUE) / 2,                      # (Q3–Q1)/2
P90_10   = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))      # P90 – P10
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
names_sep  = "_(?=[^_]+$)",   # separa sólo en el ÚLTIMO guión bajo
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# 2. Recodificar nombres de variable para que queden más cortos
mutate(variable = recode(variable,
"Precio_comprador"            = "Precio",
"per_descuento"               = "% Desc.",
"RAM (GB)"                    = "RAM (GB)",
"Almacenamiento interno (GB)" = "Alm. (GB)",
"Camara Principal (MP)"       = "Cámara Ppal (MP)",
"Camara frontal (MP)"         = "Cámara Frontal (MP)"
)) %>%
# 3. Redondear sin decimales
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# 4. Seleccionar columnas en el orden deseado
select(variable, IQR, Semi_IQR, P90_10)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2.R")
