source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/Graficos_Primer_Analisis.R")
source("~/.active-rstudio-document")
#------------------------------------------------------------Importamos los Archivos necesarios------------------------------------------------------------------
# 1. Definimos el directorio de entrada
input_dir <- "C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/input"
# 2. Listamos todos los CSV en la carpeta
csv_files <- list.files(path = input_dir,
pattern = "\\.csv$",
full.names = TRUE)
# 3. Los leemos en una lista, nombrando cada elemento con el nombre del archivo (sin extensión)
tabla_list <- csv_files %>%
set_names(nm = tools::file_path_sans_ext(basename(.))) %>%
map(read_csv)
ls()
#------------------------------------------------------------Importamos los Archivos necesarios------------------------------------------------------------------
# 1. Directorio de entrada
input_dir <- "C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/input"
# 2. Lectura de cada CSV
tabla_claro     <- read.csv(file.path(input_dir, "claro_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_personal  <- read.csv(file.path(input_dir, "personal_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_centrogar <- read.csv(file.path(input_dir, "cetrogar_celulares_base.csv"),
stringsAsFactors = FALSE)
tabla_completa  <- read.csv(file.path(input_dir, "celulares_todos_base.csv"),
stringsAsFactors = FALSE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
install.packages(c("curl", "data.table", "evaluate", "gapminder", "haven", "magick", "openssl", "patchwork", "promises", "tibble", "utf8"))
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR      = ~ IQR(.x,   na.rm = TRUE),                          # Q3 – Q1
Semi_IQR = ~ IQR(.x,   na.rm = TRUE) / 2,                      # (Q3–Q1)/2
P90_10   = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))      # P90 – P10
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
names_sep  = "_(?=[^_]+$)",   # separa sólo en el ÚLTIMO guión bajo
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# 2. Recodificar nombres de variable para que queden más cortos
mutate(variable = recode(variable,
"Precio_comprador"            = "Precio",
"per_descuento"               = "% Desc.",
"RAM (GB)"                    = "RAM (GB)",
"Almacenamiento interno (GB)" = "Alm. (GB)",
"Camara Principal (MP)"       = "Cámara Ppal (MP)",
"Camara frontal (MP)"         = "Cámara Frontal (MP)"
)) %>%
# 3. Redondear sin decimales
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# 4. Seleccionar columnas en el orden deseado
select(variable, IQR, Semi_IQR, P90_10)
View(robust_longa)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR      = ~ IQR(.x,   na.rm = TRUE),                          # Q3 – Q1
Semi_IQR = ~ IQR(.x,   na.rm = TRUE) / 2,                      # (Q3–Q1)/2
P90_10   = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))      # P90 – P10
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
names_sep  = "_(?=[^_]+$)",   # separa sólo en el ÚLTIMO guión bajo
values_to  = "valor"
)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR      = ~ IQR(.x,   na.rm = TRUE),                          # Q3 – Q1
Semi_IQR = ~ IQR(.x,   na.rm = TRUE) / 2,                      # (Q3–Q1)/2
P90_10   = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))      # P90 – P10
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
names_sep  = "_(?=[^_]+$)",   # separa sólo en el ÚLTIMO guión bajo
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# 2. Recodificar nombres de variable para que queden más cortos
mutate(variable = recode(variable,
"Precio_comprador"            = "Precio",
"per_descuento"               = "% Desc.",
"RAM (GB)"                    = "RAM (GB)",
"Almacenamiento interno (GB)" = "Alm. (GB)",
"Camara Principal (MP)"       = "Cámara Ppal (MP)",
"Camara frontal (MP)"         = "Cámara Frontal (MP)"
)) %>%
# 3. Redondear sin decimales
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# 4. Seleccionar columnas en el orden deseado
select(variable, IQR, Semi_IQR, P90_10)
robust_longa <- tabla_limpia %>%
summarise(
across(
all_of(numeric_cols),
list(
IQR      = ~ IQR(.x,   na.rm = TRUE),                          # Q3 – Q1
Semi_IQR = ~ IQR(.x,   na.rm = TRUE) / 2,                      # (Q3–Q1)/2
P90_10   = ~ diff(quantile(.x, c(0.1,0.9), na.rm = TRUE))      # P90 – P10
),
.names = "{.col}_{.fn}"
)
) %>%
pivot_longer(
cols       = everything(),
names_to   = c("variable", "medida"),
names_sep  = "_(?=[^_]+$)",   # separa sólo en el ÚLTIMO guión bajo
values_to  = "valor"
) %>%
pivot_wider(
names_from  = medida,
values_from = valor
) %>%
# 2. Recodificar nombres de variable para que queden más cortos
mutate(variable = recode(variable,
"Precio_comprador"            = "Precio",
"per_descuento"               = "% Desc.",
"RAM (GB)"                    = "RAM (GB)",
"Almacenamiento interno (GB)" = "Alm. (GB)",
"Camara Principal (MP)"       = "Cámara Ppal (MP)",
"Camara frontal (MP)"         = "Cámara Frontal (MP)"
)) %>%
# 3. Redondear sin decimales
mutate(across(where(is.numeric), ~ round(.x, 0))) %>%
# 4. Seleccionar columnas en el orden deseado
# select(variable, IQR, Semi_IQR, P90_10)
View(robust_longa)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
setwd("C:\Users\valentino.didomenica\Desktop\Project-celulares-y-tecnologia-scraping-main\input")
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Downloads/Project-celulares-y-tecnologia-scraping-main (1)/Project-celulares-y-tecnologia-scraping-main/input/Graficos_Primer_Analisis.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Downloads/Project-celulares-y-tecnologia-scraping-main (1)/Project-celulares-y-tecnologia-scraping-main/input/Graficos_Primer_Analisis.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Downloads/Project-celulares-y-tecnologia-scraping-main (1)/Project-celulares-y-tecnologia-scraping-main/input/Graficos_Primer_Analisis.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
# ---- 2. Cálculo del Top-3 por RAM
top3 <- Ranking_de_marcas_por_RAM %>%                               # parte de tu objeto
filter(!is.na(Categoria), !is.na(`RAM (GB)`)) %>%         # descarta NA importantes
group_by(Categoria, marca) %>%
summarise(ram_prom = mean(`RAM (GB)`, na.rm = TRUE), .groups = "drop_last") %>%
arrange(desc(ram_prom), .by_group = TRUE) %>%            # ordenar de mayor a menor
slice_head(n = 3) %>%                                   #exactamente 3 por gama ( ni dos, ni cuatro)
ungroup() %>%
mutate(
Categoria = factor(Categoria, levels = orden_gamas),   # fija el orden de facetas ( Gama ALta, media y baja)
marca_ord = reorder_within(
x      = marca,
by     = ram_prom,
within = Categoria,
.desc  = TRUE
)
)
# ---- 2. Cálculo del Top-3 por RAM
top3 <- Ranking_de_marcas_por_RAM %>%                               # parte de tu objeto
filter(!is.na(Categoria), !is.na(`RAM (GB)`)) %>%         # descarta NA importantes
group_by(Categoria, marca) %>%
summarise(ram_prom = mean(`RAM (GB)`, na.rm = TRUE), .groups = "drop_last") %>%
arrange(desc(ram_prom), .by_group = TRUE) %>%            # ordenar de mayor a menor
slice_head(n = 3) %>%                                   #exactamente 3 por gama ( ni dos, ni cuatro)
ungroup() %>%
mutate(
Categoria = factor(Categoria, levels = orden_gamas),   # fija el orden de facetas ( Gama ALta, media y baja)
marca_ord = reorder_within(
x      = marca,
by     = ram_prom,
within = Categoria,
.desc  = TRUE
)
)
# Gráfico
barplot_top3_ram <- ggplot(top3,                                   # datos
aes(x = marca_ord,                      # barras reordenadas
y = ram_prom,
fill = marca)) +                    # color por marca
geom_col(show.legend = FALSE) +                                  # barras
geom_text(aes(label = round(ram_prom, 0)),                       # etiquetas sin decimales
vjust = -0.5, size = 4) +
facet_wrap(~ Categoria, scales = "free_x", nrow = 1) +           # facetas en una fila
scale_x_reordered() +                                            # limpia sufijo de reorder_within
scale_fill_material_d() +                                              # paleta de colores de Google
scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +   # pequeño margen superior
labs(
title    = "Top 3 · RAM promedio",
subtitle = "Marcas líderes por gama",
x        = NULL,
y        = "RAM Promedio (GB)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.x   = element_text(angle = 45, hjust = 1)
)
# Mostrar el gráfico
print(barplot_top3_ram)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
library(GGally)
library(GGally)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
library(GGally)##Paletas inspiradas en Material Design de Google
install.packages("ggpairs")
library(ggpairs)
library(gg)
library(GGally)
ggpairs(tabla_limpia,
aes(color = Marca, alpha = 0.6)
)
ggpairs(tabla_completa,
aes(color = Marca, alpha = 0.6)
)
ggpairs(tabla_completa,
aes(x = Marca, y = count(Marca), color = Marca, alpha = 0.6)
)
datos_limpios <- tabla_completa %>%
mutate(
# Limpiar Precio: quitar "$", ".", y convertir a número
Precio_Num = as.numeric(gsub("[$.]", "", Precio)),
# Limpiar RAM: extraer solo los dígitos y convertir a número
Memoria_RAM_Num = as.numeric(str_extract(Memoria_RAM, "\\d+"))
) %>%
# Seleccionar solo las columnas que nos interesan
select(Marca, Modelo, Precio_Num, Memoria_RAM_Num) %>%
# Eliminar filas donde el precio o la RAM no pudieron ser convertidos (son NA)
filter(!is.na(Precio_Num) & !is.na(Memoria_RAM_Num))
datos_limpios <- tabla_completa %>%
mutate(
# Limpiar Precio: quitar "$", ".", y convertir a número
Precio_Num = as.numeric(gsub("[$.]", "", Precio)),
# Limpiar RAM: extraer solo los dígitos y convertir a número
Memoria_RAM_Num = as.numeric(str_extract(Memoria_RAM, "\\d+"))
) %>%
# Seleccionar solo las columnas que nos interesan
select(Marca, Modelo, Precio_Num, Memoria_RAM_Num) %>%
# Eliminar filas donde el precio o la RAM no pudieron ser convertidos (son NA)
filter(!is.na(Precio_Num) & !is.na(Memoria_RAM_Num))
# Paso 3: Calcular la correlación numérica
# --------------------------------------------------------
# Usamos la función cor() para obtener el coeficiente de Pearson
correlacion <- cor(datos_limpios$Precio_Num, datos_limpios$Memoria_RAM_Num)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
# 2. Crear el gráfico de pares (ggpairs)
#    - diag: Muestra histogramas de densidad en la diagonal.
#    - upper: Muestra el coeficiente de correlación con tamaño de fuente 5.
#    - lower: Muestra un gráfico de dispersión con una línea de regresión suave.
matriz_correlacion <- ggpairs(
datos_correlacion,
title = "Correlación entre Memoria RAM y Precio",
upper = list(continuous = wrap("cor", size = 7)),
lower = list(continuous = wrap("smooth", alpha = 0.3, size=0.2))
)
# 3. Imprimir el gráfico
print(matriz_correlacion)
# 2. Crear el gráfico de pares (ggpairs)
#    - diag: Muestra histogramas de densidad en la diagonal.
#    - upper: Muestra el coeficiente de correlación con tamaño de fuente 5.
#    - lower: Muestra un gráfico de dispersión con una línea de regresión suave.
matriz_correlacion <- ggpairs(
datos_correlacion,
title = "Correlación entre Memoria RAM y Precio",
upper = list(continuous = wrap("cor", size = 5)),
lower = list(continuous = wrap("smooth", alpha = 0.3, size=0.2))
)
# 3. Imprimir el gráfico
print(matriz_correlacion)
# 2. Crear el gráfico de pares (ggpairs)
#    - diag: Muestra histogramas de densidad en la diagonal.
#    - upper: Muestra el coeficiente de correlación con tamaño de fuente 5.
#    - lower: Muestra un gráfico de dispersión con una línea de regresión suave.
matriz_correlacion <- ggpairs(
datos_correlacion,
title = "Correlación entre Memoria RAM y Precio",
upper = list(continuous = wrap("cor", size = 5)),
lower = list(continuous = wrap("smooth", alpha = 0.3, size=0.5))
)
# 3. Imprimir el gráfico
print(matriz_correlacion)
# 2. Crear el gráfico de pares (ggpairs)
#    - diag: Muestra histogramas de densidad en la diagonal.
#    - upper: Muestra el coeficiente de correlación con tamaño de fuente 5.
#    - lower: Muestra un gráfico de dispersión con una línea de regresión suave.
matriz_correlacion <- ggpairs(
datos_correlacion,
title = "Correlación entre Memoria RAM y Precio",
upper = list(continuous = wrap("cor", size = 5)),
lower = list(continuous = wrap("smooth", alpha = 0.8, size=0.5))
)
# 3. Imprimir el gráfico
print(matriz_correlacion)
# 2. Crear el gráfico de pares (ggpairs)
#    - diag: Muestra histogramas de densidad en la diagonal.
#    - upper: Muestra el coeficiente de correlación con tamaño de fuente 5.
#    - lower: Muestra un gráfico de dispersión con una línea de regresión suave.
matriz_correlacion <- ggpairs(
datos_correlacion,
title = "Correlación entre Memoria RAM y Precio",
upper = list(continuous = wrap("cor", size = 5)),
lower = list(continuous = wrap("smooth", alpha = 0.8, size=2))
)
# 3. Imprimir el gráfico
print(matriz_correlacion)
# 2. Crear el gráfico de pares (ggpairs)
#    - diag: Muestra histogramas de densidad en la diagonal.
#    - upper: Muestra el coeficiente de correlación con tamaño de fuente 5.
#    - lower: Muestra un gráfico de dispersión con una línea de regresión suave.
matriz_correlacion <- ggpairs(
datos_correlacion,
title = "Correlación entre Memoria RAM y Precio",
upper = list(continuous = wrap("cor", size = 5)),
lower = list(continuous = wrap("smooth", alpha = 0.8, size=1.5))
)
# 3. Imprimir el gráfico
print(matriz_correlacion)
View(tabla_limpia)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
print(p)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
source("C:/Users/valentino.didomenica/Desktop/Project-celulares-y-tecnologia-scraping-main/scripts/03 - EDA/EDA_v2.R", echo=TRUE)
