filter(!is.na(Categoria), !is.na(`RAM (GB)`)) %>%          # descarta NA importantes
group_by(Categoria, marca) %>%
summarise(ram_prom = mean(`RAM (GB)`, na.rm = TRUE), .groups = "drop_last") %>%
arrange(desc(ram_prom), .by_group = TRUE) %>%              # ordenar de mayor a menor
slice_head(n = 3) %>%                                      # ⬅️ exactamente 3 por gama
ungroup() %>%
mutate(
Categoria = factor(Categoria, levels = orden_gamas),     # fija el orden de facetas
marca_ord = reorder_within(marca, ram_prom, Categoria) # barras ↓
)
# ---- 3. Gráfico --------------------------------------------------------------
barplot_top3_ram <- ggplot(top3,                                   # datos
aes(x = marca_ord,                      # barras reordenadas
y = ram_prom,
fill = marca)) +                    # color por marca
geom_col(show.legend = FALSE) +                                  # barras
geom_text(aes(label = round(ram_prom, 0)),                       # etiquetas sin decimales
vjust = -0.5, size = 4) +
facet_wrap(~ Categoria, scales = "free_x", nrow = 1) +           # facetas en una fila
scale_x_reordered() +                                            # limpia sufijo de reorder_within
scale_fill_economist() +                                         # paleta Economist
scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +   # pequeño margen superior
labs(
title    = "Top 3 · RAM promedio",
subtitle = "Marcas líderes por gama",
x        = NULL,
y        = "RAM Promedio (GB)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.x   = element_text(angle = 45, hjust = 1)
)
# Mostrar el gráfico
print(barplot_top3_ram)
# ---- 2. Cálculo del Top-3 por RAM -------------------------------------------
top3 <- Ranking_de_marcas_por_RAM %>%                                   # parte de tu objeto
filter(!is.na(Categoria), !is.na(`RAM (GB)`)) %>%          # descarta NA importantes
group_by(Categoria, marca) %>%
summarise(ram_prom = mean(`RAM (GB)`, na.rm = TRUE), .groups = "drop_last") %>%
arrange(desc(ram_prom), .by_group = TRUE) %>%              # ordenar de mayor a menor
slice_head(n = 3) %>%                                      # ⬅️ exactamente 3 por gama
ungroup() %>%
mutate(
Categoria = factor(Categoria, levels = orden_gamas),     # fija el orden de facetas
marca_ord = reorder_within(
x      = marca,
by     = ram_prom,
within = Categoria,
.desc  = FALSE
)
)
# ---- 3. Gráfico --------------------------------------------------------------
barplot_top3_ram <- ggplot(top3,                                   # datos
aes(x = marca_ord,                      # barras reordenadas
y = ram_prom,
fill = marca)) +                    # color por marca
geom_col(show.legend = FALSE) +                                  # barras
geom_text(aes(label = round(ram_prom, 0)),                       # etiquetas sin decimales
vjust = -0.5, size = 4) +
facet_wrap(~ Categoria, scales = "free_x", nrow = 1) +           # facetas en una fila
scale_x_reordered() +                                            # limpia sufijo de reorder_within
scale_fill_economist() +                                         # paleta Economist
scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +   # pequeño margen superior
labs(
title    = "Top 3 · RAM promedio",
subtitle = "Marcas líderes por gama",
x        = NULL,
y        = "RAM Promedio (GB)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.x   = element_text(angle = 45, hjust = 1)
)
# Mostrar el gráfico
print(barplot_top3_ram)
# ---- 2. Cálculo del Top-3 por RAM -------------------------------------------
top3 <- Ranking_de_marcas_por_RAM %>%                                   # parte de tu objeto
filter(!is.na(Categoria), !is.na(`RAM (GB)`)) %>%          # descarta NA importantes
group_by(Categoria, marca) %>%
summarise(ram_prom = mean(`RAM (GB)`, na.rm = TRUE), .groups = "drop_last") %>%
arrange(desc(ram_prom), .by_group = TRUE) %>%              # ordenar de mayor a menor
slice_head(n = 3) %>%                                      # ⬅️ exactamente 3 por gama
ungroup() %>%
mutate(
Categoria = factor(Categoria, levels = orden_gamas),     # fija el orden de facetas
marca_ord = marca_ord = reorder_within(
#---------------Librerias y carga de datos (setear directorio en carpeta imput)-----------------------------------------------------------------
library(tidyverse)
library(ggplot2)
library(readxl)
library(scales)
#install.packages("tidytext")
install.packages("see")
#install.packages("ggthemes")
library(ggthemes)  ##Paquete R que aporta paletas “económicas” (The Economist), “excel” y más
library(tidytext)
setwd("C:/Users/to
#---------------Librerias y carga de datos (setear directorio en carpeta imput)-----------------------------------------------------------------
library(tidyverse)
library(ggplot2)
library(readxl)
library(scales)
library(ggthemes)  ##Paquete R que aporta paletas “económicas” (The Economist), “excel” y más
library(tidytext)
library(see)  ##Paletas inspiradas en Material Design de Google
#install.packages("tidytext")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
#Separado por tiendas
barplot_separado_tiendas<-ggplot(tabla_completa, aes(y = fct_rev(fct_infreq(marca)))) +
geom_bar(fill = "skyblue") +
facet_wrap(~ sitio, scales = "free_x")+
labs(
title = "Presencia de las Marcas a Traves de las Paginas",
subtitle = "Cantidad Total de Modelos Disponibles",
y = "Marca",
x = "Cantidad de Modelos"
) +
theme_minimal() +
geom_text(stat='count', aes(label=..count..), hjust = -0.2)+
theme(
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)
)
print(barplot_separado_tiendas)
#---------------------------------------------------------- Separado por Tiendas --------------------------------------------------
#Primero voy a limpiar la tabla completa de todos aquellos datos que esten en blanco y ensucien las categorias
Tabla_separado_x_tiendas <- tabla_completa %>%
filter(
!is.na(Procesador)          & Procesador          != "",
!is.na(Categoria)                               # evita faceta NA
)
#–– 1. Parámetros configurables -------------------------------------------
# 1.1 Orden de las facetas (sitios)
orden_tiendas <- c("Personal", "Claro", "Cetrogar")
tabla_counts <- Tabla_separado_x_tiendas %>%
count(sitio, marca, name = "n") %>%
mutate(sitio = factor(sitio, levels = orden_tiendas))
#–– 3. Construir el gráfico -----------------------------------------------
barplot_separado_tiendas <- ggplot(tabla_counts,
aes(
x = n,
y = reorder_within(marca, n, sitio),
fill = sitio
)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = n),
hjust = -0.1,
size = 3) +
facet_wrap(~ sitio,
scales = "free_x",
nrow = 1) +
scale_y_reordered() +
scale_fill_material_d() +
labs(
title    = "Presencia de las Marcas a Través de las Páginas",
subtitle = "Cantidad Total de Modelos Disponibles",
x        = "Cantidad de Modelos",
y        = "Marca"
) +
theme_minimal(base_size = 12) +
theme(
plot.title        = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle     = element_text(hjust = 0.5, size = 12),
axis.text.x       = element_text(angle = 45, hjust = 1),
panel.spacing     = unit(1, "lines"),
strip.text        = element_text(face = "bold")
)
print(barplot_separado_tiendas)
#Separado por tiendas
barplot_separado_tiendas<-ggplot(tabla_completa, aes(y = fct_rev(fct_infreq(marca)))) +
geom_bar(fill = "skyblue") +
facet_wrap(~ sitio, scales = "free_x")+
labs(
title = "Presencia de las Marcas a Traves de las Paginas",
subtitle = "Cantidad Total de Modelos Disponibles",
y = "Marca",
x = "Cantidad de Modelos"
) +
theme_minimal() +
geom_text(stat='count', aes(label=..count..), hjust = -0.2)+
theme(
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)
)
print(barplot_separado_tiendas)
source("C:/Users/tobia/Downloads/EDA_v2.R")
Tabla_separado_x_tiendas <- tabla_completa %>%
filter(
!is.na(Procesador) & Procesador != "",
!is.na(Categoria)
) %>%
mutate(sitio = str_trim(sitio))
sitios_obj <- c("Personal", "Claro", "Cetrogar")
Tabla_separado_x_tiendas <- Tabla_separado_x_tiendas %>%
filter(sitio %in% sitios_obj)
# 2. Contar modelos por marca y sitio ---------------------------------------
tabla_counts <- Tabla_separado_x_tiendas %>%
count(marca, sitio, name = "cantidad") %>%
ungroup()
# 3. Crear el sitio “Total” con la suma de los tres --------------------------
tabla_total <- tabla_counts %>%
group_by(marca) %>%
summarise(cantidad = sum(cantidad), .groups = "drop") %>%
mutate(sitio = "Total")
# 4. Unir y preparar factores -----------------------------------------------
tabla_counts <- bind_rows(tabla_counts, tabla_total)
# 4.1 Definir orden global de marcas
orden_global <- tabla_counts %>%
group_by(marca) %>%
summarise(total = sum(cantidad), .groups = "drop") %>%
arrange(desc(total)) %>%
pull(marca)
# 4.2 Definir orden de facetas (incluye Total al final)
niveles_sitio <- c(sitios_obj, "Total")
tabla_counts <- tabla_counts %>%
mutate(
marca = factor(marca, levels = orden_global),
sitio = factor(sitio, levels = niveles_sitio)
)
# 5. Graficar ---------------------------------------------------------------
p <- ggplot(tabla_counts, aes(x = cantidad, y = marca, fill = sitio)) +
geom_col(show.legend = FALSE, width = 0.7) +
geom_text(aes(label = cantidad), hjust = -0.1, size = 3) +
facet_wrap(~ sitio, scales = "free_x", nrow = 1) +
scale_fill_material_d() +            # paleta Material Design discreta
labs(
title    = "Presencia de las Marcas a Través de las Páginas",
subtitle = "Cantidad Total de Modelos Disponibles",
x        = "Cantidad de Modelos",
y        = "Marca"
) +
theme_minimal(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.text.x   = element_text(angle = 45, hjust = 1),
panel.spacing = unit(1, "lines"),
strip.text    = element_text(face = "bold")
) +
expand_limits(x = max(tabla_counts$cantidad) * 1.1)
# 6. Mostrar el gráfico ----------------------------------------------------
print(p)
# 6. Mostrar el gráfico -----------------------------------------------------
print(ggplot_x_tienda)
# 6. Mostrar el gráfico ----------------------------------------------------
print(p)
#---------------------------------------------------------- Separado por Tiendas --------------------------------------------------
#Primero voy a limpiar la tabla completa de todos aquellos datos que esten en blanco y ensucien las categorias
Tabla_separado_x_tiendas <- tabla_completa %>%mutate(sitio = str_trim(sitio))
sitios_obj <- c("Personal", "Claro", "Cetrogar")
Tabla_separado_x_tiendas <- Tabla_separado_x_tiendas %>%
filter(sitio %in% sitios_obj)
# armo una cuarta categoria con la suma de las otras3
tabla_counts <- Tabla_separado_x_tiendas %>%
count(marca, sitio, name = "cantidad") %>%
ungroup()
# 3. Crear el sitio “Total” con la suma de los tres --------------------------
tabla_total <- tabla_counts %>%
group_by(marca) %>%
summarise(cantidad = sum(cantidad), .groups = "drop") %>%
mutate(sitio = "Total")
# tabla con los 3 sitios mas el cuarto llamado " total" para consolidar los otros 3
tabla_counts <- bind_rows(tabla_counts, tabla_total)
# 4.1 Definir orden global de marcas
orden_global <- tabla_counts %>%
group_by(marca) %>%
summarise(total = sum(cantidad), .groups = "drop") %>%
arrange(desc(total)) %>%
pull(marca)
# 4.2 Definir orden de facetas (incluye Total al final)
niveles_sitio <- c(sitios_obj, "Total")
tabla_counts <- tabla_counts %>%
mutate(
marca = factor(marca, levels = orden_global),
sitio = factor(sitio, levels = niveles_sitio)
)
# 5. Graficar ---------------------------------------------------------------
p <- ggplot(tabla_counts, aes(x = cantidad, y = marca, fill = sitio)) +
geom_col(show.legend = FALSE, width = 0.7) +
geom_text(aes(label = cantidad), hjust = -0.1, size = 3) +
facet_wrap(~ sitio, scales = "free_x", nrow = 1) +
scale_fill_material_d() +            # paleta Material Design discreta
labs(
title    = "Presencia de las Marcas a Través de las Páginas",
subtitle = "Cantidad Total de Modelos Disponibles",
x        = "Cantidad de Modelos",
y        = "Marca"
) +
theme_minimal(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.text.x   = element_text(angle = 45, hjust = 1),
panel.spacing = unit(1, "lines"),
strip.text    = element_text(face = "bold")
) +
expand_limits(x = max(tabla_counts$cantidad) * 1.1)
# 6. Mostrar el gráfico ----------------------------------------------------
print(p)
# Graficar ---------------------------------------------------------------
p <- ggplot(tabla_counts, aes(x = cantidad, y = marca, fill = sitio)) +
geom_col(show.legend = FALSE, width = 0.7) +
geom_text(aes(label = cantidad), hjust = -0.1, size = 3) +
facet_wrap(~ sitio, scales = "free_x", nrow = 1) +
scale_fill_material_d() +            # paleta Material Design discreta
labs(
title    = "Marcas × Modelos",
subtitle = NULL,
x        = "Modelos(n)",
y        = NULL
) +
theme_minimal(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.text.x   = element_text(angle = 45, hjust = 1),
panel.spacing = unit(1, "lines"),
strip.text    = element_text(face = "bold")
) +
expand_limits(x = max(tabla_counts$cantidad) * 1.1)
print(p)
#Boxplot comparando precios
boxplot_precios<-ggplot(tabla_completa, aes(x = "Oferta Combinada", y = Precio_comprador)) +
geom_boxplot(fill = "lightblue", color = "black", outlier.shape = NA) +
geom_jitter(width = 0.25, alpha = 0.4, color = "black") +
scale_y_continuous(labels = number_format(prefix = "$", big.mark = ".")) +
labs(
title = "Distribución General de los Precios",
subtitle = "Visión combinada de la oferta de Cetrogar, Claro, y Personal",
x = "",
y = "Precio"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 12)
)
print(boxplot_precios)
#----------Distrubucion Gauss de Precios "Precio_comprador" y " Precio_anterior" --------------------------------------------------
# 1. Calcular medias y desviaciones
mu1    <- mean(tabla_completa$Precio_comprador, na.rm = TRUE)
sd1    <- sd(tabla_completa$Precio_comprador, na.rm = TRUE)
mu2    <- mean(tabla_completa$Precio_anterior,  na.rm = TRUE)
sd2    <- sd(tabla_completa$Precio_anterior,  na.rm = TRUE)
# 2. Crear un data.frame de valores x para graficar
x_min  <- min(c(tabla_completa$Precio_comprador, tabla_completa$Precio_anterior), na.rm = TRUE)
x_max  <- max(c(tabla_completa$Precio_comprador, tabla_completa$Precio_anterior), na.rm = TRUE)
x_vals <- seq(x_min, x_max, length.out = 500)
gauss_df <- tibble(
x = rep(x_vals, 2),
y = c(dnorm(x_vals, mean = mu1, sd = sd1),
dnorm(x_vals, mean = mu2, sd = sd2)),
tipo = rep(c("Precio_comprador", "Precio_anterior"), each = length(x_vals))
)
# 3. Graficar
distribucion_precios_gauss <- ggplot(gauss_df, aes(x = x, y = y, color = tipo)) +
geom_line(size = 1) +
scale_color_material_d() +                # si usas ggthemes
labs(
title = "Distribución Normal Ajustada",
x     = "Precio",
y     = "Densidad",
color = "Variable"
) +
theme_minimal(base_size = 12) +
theme(
plot.title     = element_text(hjust = 0.5),
legend.position = "top"
)
print(distribucion_precios_gauss)
source("C:/Users/tobia/Downloads/EDA_v2.R")
datos_norm <- tabla_completa %>%
mutate(
Precio_comprador = Precio_comprador / 100,
Precio_anterior  = Precio_anterior  / 100
)) %>%
datos_norm <- tabla_completa %>%
mutate(
Precio_comprador = Precio_comprador / 100,
Precio_anterior  = Precio_anterior  / 100
) %>%
mutate(
Precio_comprador = dollar(Precio_comprador, prefix = "$", big.mark = ",", decimal.mark = ".", accuracy = 0.01),
Precio_anterior  = dollar(Precio_anterior,  prefix = "$", big.mark = ",", decimal.mark = ".", accuracy = 0.01)
)
#----------Distribucion Gauss de Precios "Precio_comprador" y " Precio_anterior" --------------------------------------------------
datos_norm <- tabla_completa %>%
mutate(
Precio_comprador = Precio_comprador / 1000,
Precio_anterior  = Precio_anterior  / 1000
) %>%
mutate(
Precio_comprador = dollar(Precio_comprador, prefix = "$", big.mark = ",", decimal.mark = ".", accuracy = 0.01),
Precio_anterior  = dollar(Precio_anterior,  prefix = "$", big.mark = ",", decimal.mark = ".", accuracy = 0.01)
)
# 1. Calcular medias y desviaciones
mu1    <- mean(datos_norm$Precio_comprador, na.rm = TRUE)
sd1    <- sd(datos_norm$Precio_comprador, na.rm = TRUE)
mu2    <- mean(datos_norm$Precio_anterior,  na.rm = TRUE)
sd2    <- sd(datos_norm$Precio_anterior,  na.rm = TRUE)
# 2. Crear un data.frame de valores x para graficar
x_min  <- min(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_max  <- max(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_vals <- seq(x_min, x_max, length.out = 500)
library(scales)
source("C:/Users/tobia/Downloads/EDA_v2.R")
#----------Distrbucion Gauss de Precios "Precio_comprador" y " Precio_anterior" --------------------------------------------------
datos_norm <- tabla_completa %>%
mutate(
Precio_comprador = Precio_comprador / 1000,
Precio_anterior  = Precio_anterior  / 1000
)
# 1. Calcular medias y desviaciones
mu1    <- mean(datos_norm$Precio_comprador, na.rm = TRUE)
sd1    <- sd(datos_norm$Precio_comprador, na.rm = TRUE)
mu2    <- mean(datos_norm$Precio_anterior,  na.rm = TRUE)
sd2    <- sd(datos_norm$Precio_anterior,  na.rm = TRUE)
# 2. Crear un data.frame de valores x para graficar
x_min  <- min(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_max  <- max(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_vals <- seq(x_min, x_max, length.out = 500)
gauss_df <- tibble(
x = rep(x_vals, 2),
y = c(dnorm(x_vals, mean = mu1, sd = sd1),
dnorm(x_vals, mean = mu2, sd = sd2)),
tipo = rep(c("Precio_comprador", "Precio_anterior"), each = length(x_vals))
)
# 3. Graficar
distribucion_precios_gauss <- ggplot(gauss_df, aes(x = x, y = y, color = tipo)) +
geom_line(size = 1) +
scale_color_material_d() +                # paleta de  ggthemes
labs(
title = "Distribución Normal Ajustada",
x     = "Precio",
y     = "Densidad",
color = "Variable"
) +
theme_minimal(base_size = 12) +
theme(
plot.title     = element_text(hjust = 0.5),
legend.position = "top"
)
print(distribucion_precios_gauss)
#----------Distrbucion Gauss de Precios "Precio_comprador" y " Precio_anterior" --------------------------------------------------
datos_norm <- tabla_completa %>%
mutate(
Precio_comprador = Precio_comprador / 1000,
Precio_anterior  = Precio_anterior  / 1000
)
# 1. Calcular medias y desviaciones
mu1    <- mean(datos_norm$Precio_comprador, na.rm = TRUE)
sd1    <- sd(datos_norm$Precio_comprador, na.rm = TRUE)
mu2    <- mean(datos_norm$Precio_anterior,  na.rm = TRUE)
sd2    <- sd(datos_norm$Precio_anterior,  na.rm = TRUE)
# 2. Crear un data.frame de valores x para graficar
x_min  <- min(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_max  <- max(c(datos_norm$Precio_comprador, datos_norm$Precio_anterior), na.rm = TRUE)
x_vals <- seq(x_min, x_max, length.out = 500)
gauss_df <- tibble(
x = rep(x_vals, 2),
y = c(dnorm(x_vals, mean = mu1, sd = sd1),
dnorm(x_vals, mean = mu2, sd = sd2)),
tipo = rep(c("Precio_comprador", "Precio_anterior"), each = length(x_vals))
)
# 3. Graficar
distribucion_precios_gauss <- ggplot(gauss_df, aes(x = x, y = y, color = tipo)) +
geom_line(size = 1) +
scale_color_material_d() +
scale_x_continuous(
labels = scales::dollar_format(
prefix = "$",
big.mark = ".",
decimal.mark = ",",
accuracy = 0.01
)
) +
scale_y_continuous(
labels = function(z) {
# multiplicar por 1000 y luego formatear con 4 decimales fijos
fmt <- scales::number_format(accuracy = 0.0001, decimal.mark = ",", big.mark = ".")
fmt(z * 1000)
}
) +
labs(
title = "Distribuciones Normalizadas de Precio",
x     = "Precio (/1000)",
y     = "Densidad",   # aclarar en la etiqueta que está escalado
color = "Variable"
) +
theme_minimal(base_size = 12) +
theme(
plot.title      = element_text(hjust = 0.5),
legend.position = "top"
)
print(distribucion_precios_gauss)
source("C:/Users/tobia/Downloads/EDA_v2.R")
source("C:/Users/tobia/Downloads/EDA_v2.R")
