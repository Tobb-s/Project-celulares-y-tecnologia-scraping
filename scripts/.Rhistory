source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
driver$server$stop()
# Cerrar sesión Selenium
remote_driver$close()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares.R")
print(data_final)
View(data_final)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares v2.R")
# Cerrar sesión Selenium
remote_driver$close()
driver$server$stop()
View(data_final)  # descomenta si quieres ver en RStudio
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares v2.R")
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares v2.R")
# Cerrar sesión Selenium
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares v2.R")
# Cerrar sesión Selenium
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares v2.R")
# Cerrar sesión Selenium
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares v2.R")
# Cerrar sesión Selenium
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Script tienda Personal Celulares v2.R")
# ---------------------------------------------------- 10. CERRAR SESIÓN ---------
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Sector Academico/UBA/CIENCIA DE DATOS/scraping_dinamico_v3.R")
View(data_final)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/scraping_dinamico_v3.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/scraping_dinamico_v3.R")
View(data_final)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Scraping Tienda Personal Celulares_v3.R")
# 10. CERRAR SELENIUM ----------------------------------------------------------
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Scraping Tienda Personal Celulares_v3.R")
view(data_final)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Scraping Tienda Personal Celulares _V4.R")
view(data_final)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Scraping Tienda Personal Celulares _V4.R")
# 10. CERRAR SELENIUM ----------------------------------------------------------
remote_driver$close()
driver$server$stop()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/Scraping Tienda Personal Celulares _V4.R")
# 9. ARMAR TIBBLE FINAL Y GUARDAR ----------------------------------------------
data_final <- tibble(
producto_url = remote_driver$getCurrentUrl()[[1]],
nombre       = html_element(html_ficha, "h1") %>% html_text2() %>% reemplaza_vacio()
) %>%
bind_cols(as_tibble_row(specs)) %>%
bind_cols(as_tibble_row(legales))
print(data_final)    # muestra en consola
view(data_final)
# Guardar CSV en la ruta especificada
output_path <- "C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/raw/personal_celu_unico.csv"
write_csv(data_final, output_path)
message("✅ CSV guardado en: ", output_path)
source("~/.active-rstudio-document")
# 7. CERRAR SELENIUM -----------------------------------------------------------
remote_driver$close()
driver$server$stop()
source("~/.active-rstudio-document")
# 7. CONSOLIDAR Y GUARDAR ------------------------------------------------------
data_final <- bind_rows(rows) %>% distinct()
write_csv(data_final, CFG$out_csv)
message("✅ CSV guardado en: ", CFG$out_csv)
# 8. CERRAR SELENIUM -----------------------------------------------------------
remote_driver$close()
View(data_final)
source("~/.active-rstudio-document")
# 8. CERRAR SELENIUM -----------------------------------------------------------
remote_driver$close()
# 8. CERRAR SELENIUM -----------------------------------------------------------
remote_driver$close()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# 8. CERRAR SELENIUM -----------------------------------------------------------
remote_driver$close()
# 7. CONSOLIDAR Y GUARDAR ------------------------------------------------------
data_final <- bind_rows(rows) %>% distinct()
write_csv(data_final, CFG$out_csv)
message("✅ CSV guardado en: ", CFG$out_csv)
# 8. CERRAR SELENIUM -----------------------------------------------------------
remote_driver$close()
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/algoritmo_clasificacion.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/algoritmo_clasificacion.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/algoritmo_clasificacion.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/algoritmo_clasificacion.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/algoritmo_clasificacion.R")
# Suponiendo solo x1 y x2 como predictores:
library(ggplot2)
# 1) Crear malla de puntos
x1_range <- seq(min(df$x1), max(df$x1), length.out = 200)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/algoritmo_clasificacion.R")
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/algoritmo_clasificacion.R")
print(p)
library(ggplot2)
# —– 8.1) Variables a visualizar
var_x <- "ram_gb"
var_y <- "ratio_memoria_precio"
# —– 8.2) Rango y grilla de puntos
# Creamos secuencias desde el mínimo al máximo de cada variable
x_seq <- seq(min(train[[var_x]]), max(train[[var_x]]), length.out = 200)
y_seq <- seq(min(train[[var_y]]), max(train[[var_y]]), length.out = 200)
# Expandimos a un data.frame de grilla
grid_df <- expand.grid(
ram_gb                 = x_seq,
ratio_memoria_precio   = y_seq
)
# —– 8.3) Fijar el resto de predictores a sus medias del train
# Calculamos medias de las otras 4 variables numéricas
otros_vars <- setdiff(vars_num, c(var_x, var_y))
medias <- colMeans(train[ , otros_vars])
# Añadimos esas columnas a la grilla, todas con su media
for (v in otros_vars) {
grid_df[[v]] <- medias[v]
}
# —– 8.4) Preprocesamiento: centrar y escalar igual que en el train()
# Recuperamos el preprocesamiento usado por caret
pp <- modelo_knn$preProcess
# Aplicamos centro/escalado al grid
grid_pp <- predict(pp, grid_df)
# —– 8.5) Predecir clase en cada punto de la grilla
grid_pp$pred <- predict(modelo_knn, newdata = grid_pp)
# —– 8.6) Graficar con ggplot2
fronteras_de_decision_k_NN <-ggplot() +
# Fase 1: regiones coloreadas según la predicción
geom_tile(
data    = grid_pp,
aes_string(x = var_x, y = var_y, fill = "pred"),
alpha   = 0.3
) +
# Fase 2: puntos del conjunto de entrenamiento
geom_point(
data    = train,
aes_string(x = var_x, y = var_y, color = "categoria"),
size    = 1.5
) +
scale_fill_brewer(palette = "Set2", name = "Región\npredicha") +
scale_color_brewer(palette = "Dark2", name = "Datos\nreales") +
guides(fill = guide_legend(order = 1),
color = guide_legend(order = 2)) +
labs(
title = sprintf("Fronteras de Decisión k-NN (k = %d)", best_k),
x     = var_x,
y     = var_y
) +
theme_minimal(base_size = 14)
print(fronteras_de_decision_k_NN)
###############################################################################
# 8) GRÁFICO DE FRONTERAS DE DECISIÓN (2D)
###############################################################################
# —– 8.1) Variables a visualizar
var_x <- "ram_gb"
var_y <- "ratio_memoria_precio"
# —– 8.2) Rango y grilla de puntos
x_seq <- seq(min(train[[var_x]]), max(train[[var_x]]), length.out = 200)
y_seq <- seq(min(train[[var_y]]), max(train[[var_y]]), length.out = 200)
grid_df <- expand.grid(ram_gb = x_seq, ratio_memoria_precio = y_seq)
# —– 8.3) Fijar otras variables a sus medias
otros_vars <- setdiff(vars_num, c(var_x, var_y))
medias <- colMeans(train[, otros_vars])
for (v in otros_vars) grid_df[[v]] <- medias[v]
# —– 8.4) Preprocesar (center & scale) igual que en training
pp <- modelo_knn$preProcess
grid_pp <- predict(pp, grid_df)
# —– 8.5) Predecir en la grilla
grid_pp$pred <- predict(modelo_knn, newdata = grid_pp)
# —– 8.6) Construir el plot y asignarlo a 'p'
p <- ggplot() +
geom_tile(
data    = grid_pp,
aes_string(x = var_x, y = var_y, fill = "pred"),
alpha   = 0.3
) +
geom_point(
data    = train,
aes_string(x = var_x, y = var_y, color = "categoria"),
size    = 1.5
) +
scale_fill_brewer(palette = "Set2", name = "Región\npredicha") +
scale_color_brewer(palette = "Dark2", name = "Datos\nreales") +
labs(
title = sprintf("Fronteras de Decisión k-NN (k = %d)", best_k),
x     = var_x,
y     = var_y
) +
theme_minimal(base_size = 14)
# —– 8.7) Mostrar el plot
print(p)
###############################################################################
# 8) MATRIZ DE CONFUSIÓN COMO HEATMAP
###############################################################################
# 8.1) Extraer la tabla de conteos de confusionMatrix
cm_table <- confusionMatrix(pred_test, test$categoria)$table
# cm_table es una tabla de tipo table(Predicción, Referencia)
# 8.2) Convertir a data.frame 'long' para ggplot2
cm_df <- as.data.frame(cm_table) %>%
rename(
Prediction = Var1,
Reference  = Var2,
Freq       = Freq
)
###############################################################################
# 8) MATRIZ DE CONFUSIÓN COMO HEATMAP (ajustado)
###############################################################################
# 8.1) Extraer la tabla de conteos
cm_table <- confusionMatrix(pred_test, test$categoria)$table
# 8.2) Aplanar con as.data.frame.table() y renombrar
cm_df <- as.data.frame.table(cm_table)
# as.data.frame.table() siempre devuelve columnas:
#   Var1  (la dimensión de filas)
#   Var2  (la dimensión de columnas)
#   Freq  (el conteo)
colnames(cm_df) <- c("Prediction", "Reference", "Freq")
# 8.3) Graficar con ggplot2
library(ggplot2)
p_confusion <- ggplot(cm_df, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = Freq), color = "black", size = 4) +
scale_fill_gradient(low = "lightblue", high = "steelblue") +
labs(
title    = "Heatmap de la Matriz de Confusión",
subtitle = sprintf("k-NN con k = %d — Accuracy test: %.3f", best_k, accuracy),
x        = "Clase Verdadera",
y        = "Clase Predicha",
fill     = "Frecuencia"
) +
theme_minimal(base_size = 14)
# 8.4) Mostrar el gráfico
print(p_confusion)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2 - copia.R")
print(p_cm)
source("C:/Users/tobia/OneDrive/Desktop/Project-celulares-y-tecnologia-scraping/scripts/03 - EDA/EDA_v2 - copia.R")
